@article{esolang2025,
  author = {Gyau Boahen Elvis},
  title = {Esoteric Languages: What are they, and why you should be concerned?},
  journal = {Dev.to},
  year = {2024},
  url = {https://dev.to/gyauelvis/esoteric-languages-what-are-they-and-why-you-should-be-concerned-592d}
}

@article{Funge93,
  author = {Alexios Chouchoulas},
  title = {Fungus: the Funge Machine},
  year = {1993},
  journal = {Esolang Journal},
  url = {http://www.club.cc.cmu.edu/~ajo/docs/fungus.pdfe}
}

@article{turingtarpit1967,
  author = {esolangs.org},
  title = {Turing tarpit},
  year = {1964},
  journal = {Esolang Journal},
  url = {https://esolangs.org/wiki/Turing_tarpit}
}

@article{BrainFuck,
  author = {Radoslaw Bulat},
  title = {BRAINFUCK â€“ LANGUAGE THAT WILL KILL YOUR BRAIN},
  year = {2017},
  journal = {Esolang Journal},
  url = {https://thecodest.co/blog/brainfuck-language-that-will-kill-your-brain/}
}

@article{INTERCAL,
  author = {Donald R. Woods and James M. Lyon},
  title = {THE INTERCAL PROGRAMMING LANGUAGE REVISED REFERENCE MANUAL},
  year = {1973},
  journal = {Intercal Journal},
  url = {https://www.cs.virginia.edu/~asb/teaching/cs415-fall05/docs/intercal.pdf}
}

@article{DbC,
  author = {Donald R. Woods and James M. Lyon},
  title = {THE INTERCAL PROGRAMMING LANGUAGE REVISED REFERENCE MANUAL},
  year = {1973},
  journal = {Intercal Journal},
  url = {https://www.cs.virginia.edu/~asb/teaching/cs415-fall05/docs/intercal.pdf}
}

@InProceedings{10.1007/978-3-031-35257-7_5,
author="Lidstr{\"o}m, Christian
and Gurov, Dilian",
editor="David, Cristina
and Sun, Meng",
title="Contract Based Embedded Software Design",
booktitle="Theoretical Aspects of Software Engineering",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="77--94",
abstract="In embedded systems development, contract based design is a design paradigm where a system is divided hierarchically into components and developed in a top-down manner, using contracts as a means to divide responsibilities and manage the complexity of the system. Contract theories provide a formal basis for reasoning about the properties of the system, and of the contracts themselves. In previous work, we have developed a contract theory for sequential, procedural programs, that is defined abstractly, at the semantic level. The theory fulfils well-established, desired properties of system design. In this paper, we present a methodology for applying the contract theory in real embedded software design. We show how to instantiate the contract theory with concrete syntaxes for defining components and contracts, and how the contract theory enables formal reasoning about the resulting objects. In order to cope with the need for different behavioural models at different levels of abstraction in an embedded system, we extend the contract theory through parametrisation on the semantic domain. We illustrate the application of the proposed methodology on a small, but realistic example, where the temporal logic TLA is used for reasoning at the system level, while lower level components are specified using pre- and post-conditions in the form of ACSL, a specification language for C.",
isbn="978-3-031-35257-7"
}

@article{karpathy_vibe_coding_2025,
  author = {Andrej Karpathy},
  title = {Vibe Programming: Redefining Software Development with AI},
  year = {2025},
  journal = {Business Insider},
  url = {https://www.businessinsider.com/vibe-coding-ai-silicon-valley-andrej-karpathy-2025-2},
}

@article{vibe_coding_medium_2025,
  author = {Mehul Gupta},
  title = {What is Vibe Coding?},
  year = {2025},
  journal = {Medium},
  url = {https://medium.com/data-science-in-your-pocket/what-is-vibe-coding-cf52c4efa867},
}

@article{vibe_coding_dev_2025,
  author = {Walse},
  title = {Vibe Coding: Redefining Creativity or Eroding the Soul of Programming?},
  year = {2025},
  journal = {Dev.to},
  url = {https://dev.to/walse/vibe-coding-redefining-creativity-or-eroding-the-soul-of-programming-1on},
}